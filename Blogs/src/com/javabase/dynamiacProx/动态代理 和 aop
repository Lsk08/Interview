动态代理是AOP的实现之一

AOP就是面向切面编程，我们可以从以下几个层面来实现AOP

静态AOP	静态织入	在编译期，切面直接以字节码的形式编译到目标字节码文件中	对系统无性能影响	灵活性不够

动态AOP	动态代理	在运行期，目标类加载后，为接口动态生成代理类，将切面织入到代理类中	相对于静态AOP更加灵活	切入的关注点需要实现接口。对系统有一点性能影响

动态字节码生成	CGLIB	在运行期，目标类加载后，动态构建字节码文件生成目标类的子类，将切面逻辑加入到子类中	没有接口也可以织入	扩展类的实例方法为final时，则无法进行织入

自定义类加载器	 	在运行期，目标加载前，将切面逻辑加到目标字节码里	可以对绝大部分类进行织入	代码中如果使用了其他类加载器，则这些类将不会被织入
字节码转换	 	在运行期，所有类加载器加载字节码前进行拦截	可以对所有类进行织入

///////////////////////
Proxy也就是第二种方法  缺点是代理类必须实现接口
静态AOP也就是写死代码
动态字节码 也就是CGlib

自定义类加载器 和  字节码装换  todo

-----spring
spring的AOP默认使用jdk的动态代理  不能使用 则用cglib