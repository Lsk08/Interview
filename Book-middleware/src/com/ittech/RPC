RPC
    远程服务调用 remote procedure call
    允许一台机器调用另一台机器的程序 的一种 【通讯机制】
    是一种通过网络向远程请求服务 但是又不需要了解底层网络协议的 【协议】

    【远程请求】 【屏蔽底层细节】

特点
    简单 语义 + 使用
    高效 网络协议
    通用 网络协议
OSI 位于 传输层 和 应用层之间

RPC框架 封装了网络请求 和 唤起服务的过程  使开发者可用像调用本地方法一样调用远程方法
RPC框架对于开发的优点
    调用方便 和调用本地方法没有区别
    编程方便 因为底层已经屏蔽了分布式调用的所有细节
    跨语言   RPC跨语言 在 表示层 和 会话层 不受语言约束

RPC的演进
第一代 函数式编程
第二代 面向对象 Java RMI
第三代 SOA 微服务  超越了RPC 增强了服务管理、治理 监控   SOA->dubbo  微服务->spring cloud
    SOA又分为 Webservice 和 ESB
        WebService 建立在http之上 通过SOAP协议通信 WDSL描述服务 UDDI发现注册服务
        WebService = http + xml = 支持面向对象 = 效率较低 适合公开接口

----------------------------------------
RMI Demo  todo
有完整的注册 查找服务
                命名服务
      客户端                 服务端
      客户端存根             服务端存根
----------------------------------------
Socket
    网络编程的具体实现 让不同的计算机之间相互通信
    描述了ip地址 和 端口
    一个通信连接的句柄
RPC 把Socket和本地方法抵用结合起来的方法 模拟远程调用
    由于无法通过本地编译执行代码  构建于语言之上
    由于需要与远程通信 必须使用Socket

Stub RPC的重点是实现 存根stub封装了RPC的过程 使客户端就像在调用本地方法一样调用远程方法
    stub的实现通过 IDL+编译器 实现

    JAVA的RMI也是通过stub实现的远程调用  但是java本身可以在运行时动态生成存根代码 隐藏了这一细节

    实际操作中stub相对于一个远程服务在本地的代理 一样的角色
RPC的调用过程
           client              server
           client stub         server stub
           client socket <--->  server socket
    客户端需要创建stub来encode方法调用的参数并且调用socket 完成网络通信
    服务端也需要stub来接受server socket的数据并且decode 然后调用server本地的方法  完成之后再encode调用socket返回
    ------------------------------------------------
    关于微服务和SOA
    微服务吸收了SOA的优点  更加强调服务之间的相互独立
    每个服务有自己独立的数据源、缓存等等 可以单独关闭和降级、修改等等 完全解耦 实现敏捷快速的开发

    -------------------------------------------------
    主流架构
    Thrift 基于IDL和代码生成工具实现异构
    gRPC probuf+IDL http2
    Dubbo